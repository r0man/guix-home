;; -*- lisp -*-
(require :alexandria)
(require :battery-portable)
(require :cpu)
(require :globalwindows)
(require :mem)
(require :net)
(require :pamixer)
(require :pass)
(require :screenshot)
(require :stumpwm)
(require :swm-gaps)
(require :ttf-fonts)
(require :wifi)

(in-package :stumpwm)

;; Interesting StumpWM configs on the web:
;; - https://config.phundrak.com/stumpwm
;; - https://github.com/lepisma/cfg/blob/master/stumpwm/.stumpwmrc
;; - https://github.com/herbertjones/my-stumpwm-config

(load "~/.config/stumpwm/commands.lisp")
(load "~/.config/stumpwm/time.lisp")

;; Use iwconfig from Guix.
(setf wifi:*iwconfig-path* "iwconfig")

;; Don't show startup message.
(setf *startup-message* nil)

;; Colors

(defvar r0man-nord0 "#2e3440")
(defvar r0man-nord1 "#3b4252")
(defvar r0man-nord2 "#434c5e")
(defvar r0man-nord3 "#4c566a")
(defvar r0man-nord4 "#d8dee9")
(defvar r0man-nord5 "#e5e9f0")
(defvar r0man-nord6 "#eceff4")
(defvar r0man-nord7 "#8fbcbb")
(defvar r0man-nord8 "#88c0d0")
(defvar r0man-nord9 "#81a1c1")
(defvar r0man-nord10 "#5e81ac")
(defvar r0man-nord11 "#bf616a")
(defvar r0man-nord12 "#d08770")
(defvar r0man-nord13 "#ebcb8b")
(defvar r0man-nord14 "#a3be8c")
(defvar r0man-nord15 "#b48ead")

(setq *colors*
      `(,r0man-nord1   ;; 0 black
        ,r0man-nord11  ;; 1 red
        ,r0man-nord14  ;; 2 green
        ,r0man-nord13  ;; 3 yellow
        ,r0man-nord10  ;; 4 blue
        ,r0man-nord14  ;; 5 magenta
        ,r0man-nord8   ;; 6 cyan
        ,r0man-nord5)) ;; 7 white

(when *initializing*
  (update-color-map (current-screen)))

(set-float-focus-color "#54728e")

;;; Gaps

;; Head gaps run along the 4 borders of the monitor(s).
(setf swm-gaps:*head-gaps-size* 0)

;; Inner gaps run along all the 4 borders of a window.
(setf swm-gaps:*inner-gaps-size* 6)

;; Outer gaps add more padding to the outermost borders of a window
;; (touching the screen border).
(setf swm-gaps:*outer-gaps-size* 6)

(when *initializing*
  (swm-gaps:toggle-gaps-on))

;; Fonts

(defvar font-size
  (alexandria:switch ((machine-instance) :test #'equal)
    ("m1" 32)
    ("precision" 24)
    (t 22)))

(set-font (format nil "-*-terminus-medium-*-*-*-~d-*-*-*-*-*-*-*" font-size))

;; TTF Fonts

(setf xft:*font-dirs*
      (list (namestring (merge-pathnames ".guix-home/profile/share/fonts" (user-homedir-pathname)))))

(setf xft:+font-cache-filename+
      (merge-pathnames "font-cache.sexp" (merge-pathnames ".fonts/" (user-homedir-pathname))))

(xft:cache-fonts)
(set-font (make-instance 'xft:font :family "Fira Code" :subfamily "Regular" :size 17))

;; Debug

(setf *debug-level* 10)
(redirect-all-output (data-dir-file "debug" "log"))

;; Message bar
(set-fg-color "white")
(set-bg-color "#111111")
(set-border-color "white")

;; Message Window

(setf *message-window-gravity* :center
      *message-window-padding* 15
      *message-window-y-padding* 15)

;; Set the default gravity for transient/pop-up windows.
(set-transient-gravity :center)

;; Input Window

(setf *input-window-gravity* :center)

(setf *normal-border-width* 1)

;; Number of pixels to increment by when interactively resizing frames.

(set-resize-increment 30)

;;; Mode Line

(setf *mode-line-background-color* "black")
(setf *mode-line-foreground-color* "white")
(setf *mode-line-border-color* "black")
(setf *mode-line-timeout* 1)

(defvar modeline-fg-grey
  "^(:fg \"#aaaaaa\")")

(defvar modeline-fg-white
  "^(:fg \"#ffffff\")")

(setf *screen-mode-line-format*
      (if (string= "ARM64" (machine-type))
          ;; CPU Info does not work on ARM64
          (list "[^B%n^b] %W | %g ^> %M | BAT: %B | %I"
                " | " modeline-fg-grey '(:eval (current-time-sao-paulo)) modeline-fg-white
                " | " modeline-fg-grey '(:eval (current-time-utc)) modeline-fg-white
                " | " '(:eval (current-time-berlin))
                " | " '(:eval (current-date)))
          (list "[^B%n^b] %W | %g ^> %C | %M | BAT: %B | %I"
                " | " modeline-fg-grey '(:eval (current-time-sao-paulo)) modeline-fg-white
                " | " modeline-fg-grey '(:eval (current-time-utc)) modeline-fg-white
                " | " '(:eval (current-time-berlin))
                " | " '(:eval (current-date)))))

(when *initializing*
  (mode-line))

;; Use thin window border.
(setf *window-border-style* :thin)

;; Input focus follows the mouse on click.
(setf *mouse-focus-policy* :click)
;; (setf *mouse-focus-policy* :sloppy) ??

;;; Groups

(when *initializing*
  (grename "Emacs")
  (gnewbg "Web")
  (gnewbg "3")
  (gnewbg "4")
  (gnewbg "5")
  (gnewbg "6")
  (gnewbg "Slack")
  (gnewbg "Logs")
  (gnewbg "Top"))

;; Rule Based Window Placement

(clear-window-placement-rules)

;; (define-frame-preference "Emacs"
;;   (0 t t :class "Emacs"))

(define-frame-preference "Web"
  (1 t t :class "Firefox")
  (1 t t :class "IceCat")
  (1 t t :class "librewolf-default"))

(define-frame-preference "Slack"
  (7 nil t :class "Slack"))

(define-frame-preference "Logs"
  (8 nil t :instance "Logs"))

(define-frame-preference "Top"
  (9 nil t :instance "HTop"))

;; Key Bindings

;; (set-prefix-key (kbd "C-t"))
(set-prefix-key (kbd "s-t"))
;; (set-prefix-key (kbd "s-SPC"))

(define-key *root-map* (kbd "!") "rofi-run")
(define-key *root-map* (kbd "b") "browser")
(define-key *root-map* (kbd "c") "terminal")
(define-key *root-map* (kbd "e") "emacs-client")
(define-key *root-map* (kbd "w") "rofi-window")

;; Volume Control
;; (define-key *top-map* (kbd "XF86AudioRaiseVolume") "pamixer-volume-up")
;; (define-key *top-map* (kbd "XF86AudioLowerVolume") "pamixer-volume-down")
;; (define-key *top-map* (kbd "XF86AudioMute") "pamixer-toggle-mute")

;; (define-key *top-map* (kbd "C-s-RET") "terminal")

;; (define-key *top-map* (kbd "s-RET") "rotate-windows")
;; (define-key *top-map* (kbd "S-s-RET") "swap-windows")

;; (define-key *top-map* (kbd "s-j") "prev")
;; (define-key *top-map* (kbd "s-k") "next")

;; (define-key *top-map* (kbd "s-J") "fprev")
;; (define-key *top-map* (kbd "s-K") "fnext")

;; (define-key *top-map* (kbd "s-m") "rofi-window")
;; (define-key *top-map* (kbd "s-r") "remove-split")

;; Pass Bindings

(defvar *pass-bindings*
  (let ((m (make-sparse-keymap)))
    (define-key m (stumpwm:kbd "c") "pass-copy-menu")
    (define-key m (stumpwm:kbd "g") "pass-generate")
    m))

(define-key *root-map* (kbd "P") '*pass-bindings*)

;; Switch to groups with s-[1-9]
(loop for group from 1 to 9 do
  (define-key *top-map* (kbd (format nil "s-~d" group))
    (format nil "gselect ~d" group)))

;; Set background image. TODO: Used to work with .xprofile, but it stopped working :/
;; (run-shell-command "feh --bg-scale ~/.dotfiles/wallpapers/stop-customizing-start-working.jpg")

;; Start programs last

(run-commands
 "gselect Web"
 "browser"
 "gselect Emacs"
 "htop"
 "gselect Logs"
 "logs"
 "gselect Emacs")

;; Centered floating window

(defun with-open-window (cmd props function &rest args)
  "Run a command, setup a handler to apply a function to the new window once it's open."
  (let (handler)
    (setf handler #'(lambda (new-window)
                      (when (apply 'stumpwm::window-matches-properties-p new-window props)
                        (remove-hook *new-window-hook* handler)
                        (setf handler #'(lambda (focused-window last-focused-window)
                                          (declare (ignore last-focused-window))
                                          (when (eq new-window focused-window)
                                            (remove-hook *focus-window-hook* handler)
                                            (apply function new-window args))))
                        (add-hook *focus-window-hook* handler))))
    (add-hook *new-window-hook* handler)
    (run-shell-command cmd)))

(defcommand run-floating-htop () ()
  "Run floating htop"
  (with-open-window
    "kitty --name floating-htop -e htop"
    '(:instance "floating-htop")
    (lambda (window)
      (let* ((head (current-head))
             (width (/ (head-width head) 2))
             (height (/ (head-height head) 3))
             (x (/ (- (head-width head) width) 2))
             (y (/ (- (head-height head) height) 2)))
        (float-window window (current-group))
        (float-window-move-resize window :x x :y y :width width :height height)))))

(defun emulator-title-p (name)
  (or (alexandria:starts-with-subseq "Android Emulator" name)
      (equal name "Emulator")
      (equal name "Extended controls")))

(defun emulator-p (win)
  (and (equal (group-name (window-group win)) "Android")
       (emulator-title-p (window-title win))))

(defun handle-new-window-created (win)
  (format t "Window created: ~s~%" win)
  (when (or (and (member (window-class win) '("jetbrains-idea" "jetbrains-studio") :test #'equal)
                 (eq (window-type win) :dialog))
            ;; (equal (window-class win) "XTerm")
            (emulator-p win))
    (push-event (lambda ()
                  (stumpwm::float-window win (window-group win))))))

(add-hook *new-window-hook* 'handle-new-window-created)

(defcommand android-float () ()
  (loop
    for win in (group-windows (current-group))
    do (format t "Checking window: ~s, type: ~s~%" win (type-of win))
    when (and (typep win 'stumpwm::tile-window)
              (emulator-title-p (window-title win)))
      do (progn
           (format t "Floating window: ~s~%" win)
           (stumpwm::float-window win (current-group)))))

(define-remapped-keys
    '(("(Firefox|IceCat|Chromium)"
       ("C-n"   . "Down")
       ("C-p"   . "Up")
       ;; ("C-f"   . "Right")
       ;; ("C-b"   . "Left")
       ("C-v"   . "Next")
       ("M-v"   . "Prior")
       ;; ("M-w"   . "C-c")
       ;; ("C-w"   . "C-x")
       ("C-y"   . "C-v")
       ;; ("M-<"   . "Home")
       ;; ("M->"   . "End")
       ;; ("C-M-b" . "M-Left")
       ;; ("C-M-f" . "M-Right")
       ;; ("C-k"   . ("C-S-End" "C-x"))
       )))
